#!/usr/bin/env NODE_PATH="../../../../node_modules" node
/*eslint no-console:0*/

// this is a copy of markdown-it's bundled command-line tool with updates to
// support chosen plugins

'use strict';

var fs = require('fs');
var argparse = require('argparse');


////////////////////////////////////////////////////////////////////////////////

var cli = new argparse.ArgumentParser({
  prog: 'markdown-it',
  version: require('markdown-it/package.json').version,
  addHelp: true
});

cli.addArgument([ '--no-html' ], {
  help:   'Disable embedded HTML',
  action: 'storeTrue'
});

cli.addArgument([ '-l', '--linkify' ], {
  help:   'Autolink text',
  action: 'storeTrue'
});

cli.addArgument([ '-t', '--typographer' ], {
  help:   'Enable smartquotes and other typographic replacements',
  action: 'storeTrue'
});

cli.addArgument([ '--trace' ], {
  help:   'Show stack trace on error',
  action: 'storeTrue'
});

cli.addArgument([ 'file' ], {
  help: 'File to read',
  nargs: '?',
  defaultValue: '-'
});

cli.addArgument([ '-o', '--output' ], {
  help: 'File to write',
  defaultValue: '-'
});

var options = cli.parseArgs();


function readFile(filename, encoding, callback) {
  if (options.file === '-') {
    // read from stdin
    var chunks = [];

    process.stdin.on('data', function (chunk) { chunks.push(chunk); });

    process.stdin.on('end', function () {
      return callback(null, Buffer.concat(chunks).toString(encoding));
    });
  } else {
    fs.readFile(filename, encoding, callback);
  }
}


////////////////////////////////////////////////////////////////////////////////

readFile(options.file, 'utf8', function (err, input) {
  var output, md;

  if (err) {
    if (err.code === 'ENOENT') {
      console.error('File not found: ' + options.file);
      process.exit(2);
    }

    console.error(
      options.trace && err.stack ||
      err.message ||
      String(err));

    process.exit(1);
  }

  md = require('markdown-it')({
    html: !options['no-html'],
    xhtmlOut: false,
    typographer: options.typographer,
    linkify: options.linkify
  });

  md.use(require("markdown-it-anchor")); // Optional, but makes sense as you really want to link to something 
  md.use(require("markdown-it-table-of-contents"), {
    includeLevel: [2,3,4,5,6],
    listType: 'ol'
  });

  md.use(require('markdown-it-katex'));

  md.use(require('markdown-it-video', { youtube: { width: 640, height: 390 } }));

  md.use(require('markdown-it-highlightjs'));

  // override image rendering to support http://ashleydw.github.io/lightbox
  // design borrowed heavily from https://www.npmjs.com/package/markdown-it-linkify-images
  md.renderer.rules.image = function(tokens, idx, options, env, self) {
    var token = tokens[idx];
    var srcIndex = token.attrIndex('src');
    var img = token.attrs[srcIndex][1];
    var argstr = token.content.split('##');

    var caption = argstr[0];
    var args = {};

    args.url = img;
    args.title = '';
    args.footer = caption;
    args.gallery = '';

    for ( var i=0 ; i<argstr.length ; i++ ) {
        var kv = argstr[i].split(':');
        args[kv[0]] = kv.slice(1).join(':');
    }

    var data_title = '';
    if ( args.title != '' ) {
      data_title = ' data-title="'+args.title+'"';
    }

    var data_footer = '';
    if ( args.footer != '' ) {
      data_footer = ' data-footer="'+args.footer+'"';
    }

    var data_gallery = '';
    if ( args.gallery != '' ) {
      data_gallery = ' data-gallery="'+args.gallery+'"';
    }

    return '<a href="'+args.url+'" data-toggle="lightbox"'+data_title+data_footer+data_gallery+'>' +
        '<img src="'+img+'" alt="'+caption+'" class="img-thumbnail mx-auto d-block">' +
      '</a>';
  }

  try {
    output = md.render(input);

  } catch (e) {
    console.error(
      options.trace && e.stack ||
      e.message ||
      String(e));

    process.exit(1);
  }

  if (options.output === '-') {
    // write to stdout
    process.stdout.write(output);
  } else {
    fs.writeFileSync(options.output, output);
  }
});
